name: Windows MSVC

on:
    push:
    pull_request:
    schedule:
    #Every Sunday at midnight
    - cron:  '0 0 * * 0'


env:
  CMAKE_VERSION: 3.16.x
  NINJA_VERSION: 1.10.2
  CC: cl
  CXX: cl
  artifact: "Windows-MSVC.tar.xz"
  BUILD_TYPE: "Debug"
  CMAKE_INSTALL_PREFIX: "../bin"
  
jobs:

  build:
    name: "Build"
    runs-on: windows-latest
    strategy:
      fail-fast: false
    steps:

    - name: Checkout
      uses: actions/checkout@v2.3.4

    - name: Install cmake
      uses: jwlawson/actions-setup-cmake@v1.9
      with:
        cmake-version: '${{env.CMAKE_VERSION}}'
        github-api-token: ${{ secrets.GITHUB_TOKEN }}

    - name: Install Ninja
      uses: seanmiddleditch/gha-setup-ninja@v3
      with:
        version: '${{env.NINJA_VERSION}}'

    - uses: ilammy/msvc-dev-cmd@v1

    - name: Configure
      run: cmake -S . -B build -DCMAKE_INSTALL_PREFIX=${{ env.CMAKE_INSTALL_PREFIX }}
      shell: cmd

    - name: Build
      run: cmake --build build --config ${{ env.BUILD_TYPE }} --parallel 2
      shell: cmd
      
    - name: Install Strip
      run: cmake --install build --prefix ${{ env.CMAKE_INSTALL_PREFIX }} --config ${{ env.BUILD_TYPE }}
      shell: cmd
      
    - name: Run tests
      run: ctest -C ${{ env.BUILD_TYPE }} -VV --output-on-failure
      shell: cmd

  release:
    name: "Release"
    if: contains(github.ref, 'tags/v')
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1.1.4
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

    - name: Store Release url
      run: |
        echo "${{ steps.create_release.outputs.upload_url }}" > ./upload_url

    - name: Pack
      working-directory: instdir
      run: cmake -E tar cJfv ../${{ env.artifact }} .

    - name: Upload
      uses: actions/upload-artifact@v2
      with:
        path: instdir
        name: ${{ env.artifact }}

  publish:
    if: contains(github.ref, 'tags/v')
    name: "Publish"
    runs-on: ubuntu-latest
    needs: release

    steps:
    - name: Download artifact
      uses: actions/download-artifact@v2
      with:
        name: ${{ env.artifact }}
        path: ./

    - name: Download URL
      uses: actions/download-artifact@v2
      with:
        name: upload_url
        path: ./
    - id: set_upload_url
      run: |
        upload_url=`cat ./upload_url`
        echo ::set-output name=upload_url::$upload_url
    - name: Upload to Release
      id: upload_to_release
      uses: actions/upload-release-asset@v1.0.2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.set_upload_url.outputs.upload_url }}
        asset_path: ./${{ env.artifact }}
        asset_name: ${{ env.artifact }}
        asset_content_type: application/x-gtar
